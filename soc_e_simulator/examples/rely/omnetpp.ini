[General]
network = TSNNetwork
debug-on-errors = true
cmdenv-status-frequency = 1s
sim-time-limit = 25s # 20.000 / 1ms = 20s

##########
# General setings
##########

**.eth[*].bitrate = 1Gbps


# interface table
**.interfaceTable.displayAddresses = true
# Visualizer settings
**.visualizer.interfaceTableVisualizer.displayInterfaceTables = true

#########
# gPTP
#########
**.syncInterval = 30s # ridicules high but more or less irrelevant due to no clock drift. correct values would be interesting
**.hasTimeSynchronization = true
**.traffic_generator.gptp.gptpNodeType = "MASTER_NODE"
**.traffic_generator.gptp.masterPorts = ["eth0"]
**.traffic_generator.gptp.slavePort = ""

**.bridgev20.gptp.masterPorts = ["eth0"]
**.bridgev20.gptp.slavePort = "eth1"

**.bridgeN12.gptp.masterPorts = ["eth0", "eth2"]
**.bridgeN12.gptp.slavePort = "eth1"

**.bridgev22.gptp.masterPorts = ["eth1"]
**.bridgev22.gptp.slavePort = "eth0"


##########
# Traffic generator
##########

*.talker.numApps = 1
*.talker.app[0].typename = "UdpSourceApp"
*.talker.app[0].source.productionInterval = 1ms
# length - 58 Byte = correct length (udp/ip/vlan header etc.)
*.talker.app[0].source.packetLength = 246B
*.talker.app[0].io.destAddress = "TSNNetwork.listener"
*.talker.app[0].io.destPort = 42



*.listener.numApps = 1
*.listener.app[0].typename = "UdpSinkApp"
*.listener.app[0].io.localPort = 42

##########
# TAS
##########

**.eth[*].macLayer.queue.numTrafficClasses = 2
**.eth[*].macLayer.queue.*[0].display-name = "Slot 0"
**.eth[*].macLayer.queue.*[1].display-name = "Slot 1"

**.eth[*].macLayer.queue.transmissionGate[0].offset = 0ms
**.eth[*].macLayer.queue.transmissionGate[*].durations = [50us, 50us] # period is 100ms
**.eth[*].macLayer.queue.transmissionGate[1].offset = 50us

# enable egress traffic shaping
**.hasEgressTrafficShaping = true
*.talker.hasOutgoingStreams = true
# client stream identification
*.talker.bridging.streamIdentifier.identifier.mapping = [{stream: "traffic", packetFilter: expr(has(udp))}
                                                         ]

*.talker.bridging.streamCoder.encoder.mapping = [{stream: "traffic", pcp: 5},
                                                 {stream: "everything_else", pcp: 0}]


# disable forwarding IEEE 802.1Q C-Tag
**.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]
